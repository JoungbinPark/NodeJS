// 04.JSBasic02.js

/* 변수 선언
    자바 스크립트의 버젼에 따라 사용하는 변수선언이 많이 달라지고 있습니다. 
    브라우저를 대상으로 하는 ES2015 버전 이전에는 var로 변수선언이 많이 되었지만 이후부터 const 또는 let 변수를 많이 사용합니다. 
*/

// var로 선언한 변수 사용예
var x = 3;
console.log('var x : ', x);
y = '홍길동';   //별도의 변수선언 없이도 사용(대입, 저장)이 가능
console.log('y : ', y);

//console.log('z : ', z);   //에러
//선언하지 않아도 값이 초기화되지 않으면 사용은 되지 않습니다. 
//변수의 자료형이 존재하지 않아서 숫자와 문자를 자유롭게 수시로 바꿔서 저장할 수 있습니다. 

x = '삼';
y = 1234;
k = function() { console.log("변수에 함수를 저장하고 변수이름으로 호출했습니다. ")}
k();

// 상수형 변수 const
// java의 static final과 같은 역할을 하는 변수
// 변수의 생성과 함께 반드시 초기값이 있어야 하며, 이후 저장된 값의 변경은 불가능합니다. 
const z = 10;
console.log("const z : ", z);
// z = '홍길서';    // Assignment to constant variable.
//const a;         // Missing initializer in const declaration
console.log("-------------------------------------------");

//var과 const의 또 다른 차이점
// - 블록스코프 : var 변수는 영역({}, 지역변수)과 상관없이 값에 접근이 가능
if( true ) {
    var a = 3;
}
console.log("a : ", a);
// 함수의 시작과 끝을 구분짓는 중괄호( { , } )는 영향을 받아서 함수를 벗어나면 변수로 인식되지 못합니다. 

// 반면 const 변수(상수)는 블록 영역에 영향을 받아 접근이 구분됩니다. 
if( true ) {
    const b = 3;
}
//console.log("b : ", b);  //b is not defined

// let : 값을 변경할 수 있는 변수를 사용하려면, 앞에서 사용한 var 변수나, 서버프로그래밍에서 주로 사용하는 let 변수를 사용합니다. 값을 변경할 수도 있고, 변수 선언 시 값이 반드시 초기화되지 않아도 됩니다. 
// var과 let 변수의 차이는 다소 많지 않으며, 명백히 다른 점이 있지만 현재 사용상 구분할 일이 그렇게 많지는 않습니다. 

/* const, let, var의 차이점
    1. 자바스키립트 변수는 선언, 할당, 사용의 단계로 구분됩니다. 
    2. const와 let은 그 사용영역이 구분되어 사용해야 하지만, var은 그 구분의 비교적 자유롭습니다. 
    3. Const와 let 변수는 반드시 선언 후 사용해야하며, var은 선언없이 사용될 수 있습니다. 
    4. 선언없이 사용된 변수는 모두 var 변수입니다. 
    5. 선언, 그리고 할당없이 사용된 var 변수의 최초값은 undefined입니다. 다만 서버에서는 이점이 에러의 원인이 됩니다. 

    const
    선언과 동시에 값이 반드시 초기화되어야합니다. 
    값은 초기화 이후에 변경할 수 없습니다. 
    하나의 스코프({ }) 안에서만 유효하며, 하나의 스코프 안에서 중복 선언할 수 없다. 
    스코프를 벗어나면 변수는 소멸됩니다. 

    let
    반드시 선언해서 사용해야 하지만 초기값을 반드시 대입해야 하는 것은 아닙니다. 
    초기값이 없는 변수의 최초값은 undefined 입니다. 
    변수값의 변경이 가능합니다. 
    하나의 스코프({ }) 안에서만 유효하며, 하나의 스코프 안에서 중복선언할 수 없다.
    스코프를 벗어나면 변수는 소멸됩니다. 

    var
    선언, 할당, 사용이 위치와 상관없이 자유롭습니다. 
    스코프 상관없이 접근이 가능합니다. 
    같은 스코프 안에서 중복선언도 가능합니다. 이때 마지막 선언 및 대입 값이 현재값으로 인식됩니다. 
    때문에 구조가 복잡한 함수 내에서는 현재값을 유추하는데 다소 불편함이 있습니다. 
    값의 변경이 자유로워서 의도한 값의 저장 및 유지가 실패할 가능성이 있습니다. 
    함수의 영역을 벗어나는 스코프에만 영향을 받습니다. 

    변수 선언과 선언키워드 별 사용의 방향
    1. 변수선언에 기본적으로 const를 사용하고, 값을 바꿔서 사용해야하는 경우에 한에서 let을 사용하는 것을 권장
    2. 변수에 객체가 대입되는 경우도 const 사용을 권장합니다. 
    */
   const obj = {kor:98, eng:89, mat:90};
   console.log(obj);
   // obj = {kor:87, eng:55, mat:87};      // 에러
    obj.kor = 70;
    obj.eng = 80;
    obj.mat = 99;
    console.log(obj);
    
    /*
    const를 사용하면 의도치 않은 재할당을 방지해주기 때문에 데이터의 안전을 보장받을 수 있습니다. 
    3. 재할당이 필요한 경우에 한정해 let을 사용합니다. 이 때 변수의 스코프(영역)은 최대한 좁게 만드는 것을 권장합니다. 

    */
